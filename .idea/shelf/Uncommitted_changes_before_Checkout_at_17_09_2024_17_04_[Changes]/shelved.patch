Index: app/src/main/java/ru/practicum/android/diploma/ui/jobdetails/JobDetailsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.ui.jobdetails\r\n\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.text.Html\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.resource.bitmap.RoundedCorners\r\nimport org.koin.androidx.viewmodel.ext.android.viewModel\r\nimport ru.practicum.android.diploma.R\r\nimport ru.practicum.android.diploma.databinding.FragmentJobDetailsBinding\r\nimport ru.practicum.android.diploma.domain.models.VacancyDetailsModel\r\nimport ru.practicum.android.diploma.presentation.models.VacancyDetailsScreenState\r\nimport ru.practicum.android.diploma.presentation.viewmodel.VacancyDetailsViewModel\r\n\r\nprivate const val ICON_RADIUS = 12\r\n\r\nclass JobDetailsFragment : Fragment() {\r\n    private var binding: FragmentJobDetailsBinding? = null\r\n    private val viewModel: VacancyDetailsViewModel by viewModel()\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentJobDetailsBinding.inflate(inflater, container, false)\r\n        return binding?.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        var vacancyId: String = \"\"\r\n        arguments?.let {\r\n            vacancyId = JobDetailsFragmentArgs.fromBundle(it).vacancyId\r\n        }\r\n        viewModel.getScreenLiveData().observe(viewLifecycleOwner) { state ->\r\n            when (state) {\r\n                is VacancyDetailsScreenState.Content -> {\r\n                    showContent(state.data)\r\n                }\r\n\r\n                is VacancyDetailsScreenState.Loading -> {\r\n                    showLoading()\r\n                }\r\n\r\n                is VacancyDetailsScreenState.NotFound -> {\r\n                    vacancyNotFoundOrDeleted()\r\n                }\r\n\r\n                else -> {\r\n                    serverError()\r\n                }\r\n            }\r\n        }\r\n\r\n        viewModel.getVacancy(vacancyId)\r\n        binding?.backButton?.setOnClickListener {\r\n            findNavController().popBackStack()\r\n        }\r\n    }\r\n\r\n    private fun showLoading() {\r\n        hideAll()\r\n        binding?.pbPage?.visibility = View.VISIBLE\r\n    }\r\n\r\n    private fun serverError() {\r\n        hideAll()\r\n        binding?.groupServerError?.visibility = View.VISIBLE\r\n    }\r\n\r\n    private fun vacancyNotFoundOrDeleted() {\r\n        hideAll()\r\n        binding?.vacancyNotFound?.visibility = View.VISIBLE\r\n    }\r\n\r\n    fun hideAll() {\r\n        binding?.vacancyDetails?.visibility = View.GONE\r\n        binding?.groupServerError?.visibility = View.GONE\r\n        binding?.vacancyNotFound?.visibility = View.GONE\r\n        binding?.pbPage?.visibility = View.GONE\r\n    }\r\n\r\n    private fun showContent(vacancy: VacancyDetailsModel) {\r\n        hideAll()\r\n        binding?.vacancyDetails?.visibility = View.VISIBLE\r\n        binding?.vacancyName?.text = vacancy.name\r\n        binding?.vacancySalary?.text = vacancy.salary\r\n        binding?.experienceValues?.text = vacancy.experience\r\n        binding?.isFulltimeIsRemote?.text = vacancy.schedule\r\n        binding?.let { insertHtml(it.vacancyDescriptionValue, vacancy.description) }\r\n        if (vacancy.keySkills.isEmpty()) {\r\n            binding?.keySkills?.visibility = View.GONE\r\n        } else {\r\n            binding?.let { insertHtml(it.vacancyKeySkillsValue, generateHtmlList(vacancy.keySkills)) }\r\n        }\r\n        binding?.let {\r\n            Glide.with(requireContext())\r\n                .load(vacancy.employerIcon)\r\n                .placeholder(R.drawable.company_logo_placeholder)\r\n                .centerCrop()\r\n                .transform(RoundedCorners(ICON_RADIUS))\r\n                .into(it.cardVacancy)\r\n        }\r\n        binding?.city?.text = vacancy.address\r\n        binding?.companyName?.text = vacancy.employerName\r\n    }\r\n\r\n    fun generateHtmlList(inputList: List<String>): String {\r\n        val listType = \"ul\"\r\n        val htmlBuilder = StringBuilder()\r\n        htmlBuilder.append(\"<$listType>\\n\")\r\n        for (item in inputList) {\r\n            htmlBuilder.append(\"<li>$item</li>\\n\")\r\n        }\r\n        htmlBuilder.append(\"</$listType>\")\r\n        return htmlBuilder.toString()\r\n    }\r\n\r\n    fun insertHtml(textView: TextView, html: String) {\r\n        textView.text = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            Html.fromHtml(html, Html.FROM_HTML_MODE_COMPACT)\r\n        } else {\r\n            Html.fromHtml(html)\r\n        }\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        binding = null\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/ui/jobdetails/JobDetailsFragment.kt b/app/src/main/java/ru/practicum/android/diploma/ui/jobdetails/JobDetailsFragment.kt
--- a/app/src/main/java/ru/practicum/android/diploma/ui/jobdetails/JobDetailsFragment.kt	
+++ b/app/src/main/java/ru/practicum/android/diploma/ui/jobdetails/JobDetailsFragment.kt	
@@ -29,6 +29,7 @@
         container: ViewGroup?,
         savedInstanceState: Bundle?
     ): View? {
+
         binding = FragmentJobDetailsBinding.inflate(inflater, container, false)
         return binding?.root
     }
