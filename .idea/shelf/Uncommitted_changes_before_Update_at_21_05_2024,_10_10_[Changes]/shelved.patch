Index: app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.ui.search\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.inputmethod.InputMethodManager\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.Fragment\nimport androidx.navigation.fragment.findNavController\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport org.koin.androidx.viewmodel.ext.android.viewModel\nimport ru.practicum.android.diploma.R\nimport ru.practicum.android.diploma.databinding.FragmentSearchBinding\nimport ru.practicum.android.diploma.domain.models.Currency\nimport ru.practicum.android.diploma.domain.models.Vacancy\n\nclass SearchFragment : Fragment() {\n    private var _binding: FragmentSearchBinding? = null\n    private val binding get() = _binding!!\n    private val viewModel by viewModel<SearchViewModel>()\n    private var _adapter: VacancyAdapter? = null\n    private val vacancyList: ArrayList<Vacancy> = arrayListOf()\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?,\n    ): View? {\n        _binding = FragmentSearchBinding.inflate(inflater, container, false)\n        return _binding?.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        viewModel.stateSearch.observe(viewLifecycleOwner) {\n            render(it)\n        }\n\n        _adapter = VacancyAdapter(vacancyList, object : VacancyAdapter.OnClickListener {\n            override fun onClick(vacancy: Vacancy) {\n                openFragmentVacancy(vacancyId = vacancy.id)\n            }\n        })\n        binding.rvSearch.adapter = _adapter\n\n        binding.rvSearch.layoutManager = LinearLayoutManager(context)\n        viewModel.search(\"test\", hashMapOf())\n    }\n\n    private fun render(state: SearchState) {\n        when (state) {\n            is SearchState.Loading -> renderSearchLoading()\n            is SearchState.Default -> renderSearchDefault()\n            is SearchState.Empty -> renderSearchEmpty()\n            is SearchState.NoConnection -> renderSearchNoConnection()\n            is SearchState.Error -> renderSearchError()\n            is SearchState.Content -> renderSearchContent(state.vacancies, state.currencyDictionary)\n        }\n    }\n\n    private fun renderSearchLoading() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = true\n            progressBarBottom.isVisible = false\n            ivPlaceholder.isVisible = false\n            tvPlaceholder.isVisible = false\n        }\n    }\n\n    private fun renderSearchDefault() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.setImageResource(R.drawable.search_man)\n            ivPlaceholder.isVisible = true\n            tvPlaceholder.isVisible = false\n            etButtonSearch.setText(\"\")\n            hideKeyboard()\n        }\n    }\n\n    private fun renderSearchEmpty() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.setImageResource(R.drawable.nothing_found_cat)\n            ivPlaceholder.isVisible = true\n            tvPlaceholder.setText(R.string.search_vacancy_list_not_found)\n            tvPlaceholder.isVisible = true\n        }\n    }\n\n    private fun renderSearchError() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.setImageResource(R.drawable.server_error_towel)\n            ivPlaceholder.isVisible = true\n            tvPlaceholder.setText(R.string.search_server_error)\n            tvPlaceholder.isVisible = true\n        }\n    }\n\n    private fun renderSearchNoConnection() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.setImageResource(R.drawable.no_internet_scull)\n            ivPlaceholder.isVisible = true\n            tvPlaceholder.setText(R.string.search_no_connection)\n            tvPlaceholder.isVisible = true\n        }\n    }\n\n    private fun renderSearchContent(vacancies: List<Vacancy>, currencyDictionary: Map<String, Currency>) {\n        _adapter?.vacancyList?.clear()\n        _adapter?.vacancyList?.addAll(vacancies)\n        _adapter?.currencyDictionary?.clear()\n        _adapter?.currencyDictionary?.putAll(currencyDictionary)\n        _adapter?.notifyDataSetChanged()\n        with(binding) {\n            tvButtonSearchResult.text =\n                requireContext().getString(R.string.found_vacancies_count, vacancyList.size)\n            tvButtonSearchResult.isVisible = true\n            rvSearch.isVisible = true\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.isVisible = false\n            tvPlaceholder.isVisible = false\n        }\n    }\n\n    private fun openFragmentVacancy(vacancyId: String) {\n        findNavController().navigate(\n            R.id.action_searchFragment_to_vacanciesFragment,\n            Bundle().apply { putInt(\"vacancy_model\", vacancyId.toInt()) }\n        )\n    }\n\n    private fun hideKeyboard() {\n        val inputMethodManager =\n            requireContext().getSystemService(Context.INPUT_METHOD_SERVICE) as? InputMethodManager\n        inputMethodManager?.hideSoftInputFromWindow(binding.etButtonSearch.windowToken, 0)\n        binding.etButtonSearch.isEnabled = true\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt
--- a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt	(revision f7c97502630ebf1543e8b543fd9f17a421aad2db)
+++ b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt	(date 1716270497907)
@@ -56,7 +56,7 @@
             is SearchState.Default -> renderSearchDefault()
             is SearchState.Empty -> renderSearchEmpty()
             is SearchState.NoConnection -> renderSearchNoConnection()
-            is SearchState.Error -> renderSearchError()
+            is SearchState.ServerError -> renderSearchError()
             is SearchState.Content -> renderSearchContent(state.vacancies, state.currencyDictionary)
         }
     }
Index: app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.ui.search\n\nimport android.util.Log\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.launch\nimport ru.practicum.android.diploma.domain.api.dictionary.DictionaryInteractor\nimport ru.practicum.android.diploma.domain.api.search.SearchInteractor\n\nclass SearchViewModel(\n    private val searchInteractor: SearchInteractor,\n    private val dictionaryInteractor: DictionaryInteractor\n) : ViewModel() {\n    private var searchJob: Job? = null\n    private var isClickAllowed = true\n    private var lastSearchQueryText: String? = null\n\n    private val _stateSearch = MutableLiveData<SearchState>(SearchState.Default)\n    val stateSearch: LiveData<SearchState> get() = _stateSearch\n\n    fun search(request: String, options: HashMap<String, String>) {\n        renderState(\n            SearchState.Loading\n        )\n        options[\"text\"] = request\n        viewModelScope.launch {\n            val currencyDictionary = dictionaryInteractor.getCurrencyDictionary()\n\n            searchInteractor.searchVacancies(options).collect { result ->\n                result.onSuccess {\n                    renderState(\n                        SearchState.Content(\n                            vacancies = it,\n                            currencyDictionary = currencyDictionary\n                        )\n                    )\n                }\n                result.onFailure {\n                    Log.v(\"VACANCY\", \"failure\" + it.toString())\n                }\n            }\n        }\n    }\n\n    private fun renderState(state: SearchState) {\n        _stateSearch.value = state\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt
--- a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt	(revision f7c97502630ebf1543e8b543fd9f17a421aad2db)
+++ b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt	(date 1716274305893)
@@ -17,6 +17,9 @@
     private var searchJob: Job? = null
     private var isClickAllowed = true
     private var lastSearchQueryText: String? = null
+    private var isNextPageLoading = true
+    private var currPage: Int? = null
+    private var maxPage: Int? = null
 
     private val _stateSearch = MutableLiveData<SearchState>(SearchState.Default)
     val stateSearch: LiveData<SearchState> get() = _stateSearch
@@ -25,15 +28,38 @@
         renderState(
             SearchState.Loading
         )
+        searchVacancies(request, options)
+    }
+
+    private fun renderState(state: SearchState) {
+        _stateSearch.value = state
+    }
+
+    fun onLastItemReached() {
+        if (isNextPageLoading) {
+            isNextPageLoading = false
+            if (currPage!! < maxPage!!) {
+                renderState(SearchState.NewPageLoading)
+                currPage = currPage!! + 1
+                val t = hashMapOf<String, String>()
+                t.put("page", "$currPage")
+                searchVacancies("test", t)
+            }
+        }
+    }
+
+    private fun searchVacancies(request: String, options: HashMap<String, String>) {
         options["text"] = request
         viewModelScope.launch {
             val currencyDictionary = dictionaryInteractor.getCurrencyDictionary()
 
             searchInteractor.searchVacancies(options).collect { result ->
                 result.onSuccess {
+                    currPage = it.currPage
+                    maxPage = it.fromPages
                     renderState(
                         SearchState.Content(
-                            vacancies = it,
+                            vacancyPage = it,
                             currencyDictionary = currencyDictionary
                         )
                     )
@@ -41,11 +67,8 @@
                 result.onFailure {
                     Log.v("VACANCY", "failure" + it.toString())
                 }
+                isNextPageLoading = true
             }
         }
     }
-
-    private fun renderState(state: SearchState) {
-        _stateSearch.value = state
-    }
 }
Index: app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.ui.search\n\nimport ru.practicum.android.diploma.domain.models.Currency\nimport ru.practicum.android.diploma.domain.models.Vacancy\n\nsealed class SearchState {\n    object Loading : SearchState()\n    object Default : SearchState()\n    object Empty : SearchState()\n    object NoConnection : SearchState()\n    data class Error(val message: String) : SearchState()\n    data class Content(val vacancies: List<Vacancy>, val currencyDictionary: Map<String, Currency>) : SearchState()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt
--- a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt	(revision f7c97502630ebf1543e8b543fd9f17a421aad2db)
+++ b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt	(date 1716270575995)
@@ -8,6 +8,6 @@
     object Default : SearchState()
     object Empty : SearchState()
     object NoConnection : SearchState()
-    data class Error(val message: String) : SearchState()
+    data class ServerError(val message: String) : SearchState()
     data class Content(val vacancies: List<Vacancy>, val currencyDictionary: Map<String, Currency>) : SearchState()
 }
