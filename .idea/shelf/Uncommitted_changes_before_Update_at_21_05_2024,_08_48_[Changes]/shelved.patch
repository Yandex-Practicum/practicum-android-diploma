Index: app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.ui.search\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.content.Context\nimport androidx.navigation.fragment.findNavController\nimport android.view.inputmethod.InputMethodManager\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.Fragment\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport org.koin.androidx.viewmodel.ext.android.viewModel\nimport ru.practicum.android.diploma.R\nimport ru.practicum.android.diploma.databinding.FragmentSearchBinding\nimport ru.practicum.android.diploma.domain.models.Vacancy\n\nclass SearchFragment : Fragment() {\n    private var _binding: FragmentSearchBinding? = null\n    private val binding get() = _binding!!\n    private val viewModel by viewModel<SearchViewModel>()\n    private var _adapter: VacancyAdapter? = null\n    private val vacancyList: ArrayList<Vacancy> = arrayListOf()\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?,\n    ): View? {\n        _binding = FragmentSearchBinding.inflate(inflater, container, false)\n        return _binding?.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n\n        viewModel.stateSearch.observe(viewLifecycleOwner) {\n            render(it)\n        }\n\n        _adapter = VacancyAdapter(vacancyList, object : VacancyAdapter.VacancyClick {\n            override fun onClick(vacancy: Vacancy) {\n                openFragmentVacancy(vacancyId = vacancy.id)\n            }\n        })\n        binding.rvSearch.adapter = _adapter\n\n        binding.rvSearch.layoutManager = LinearLayoutManager(context)\n    }\n\n    private fun render(state: SearchState) {\n        when (state) {\n            is SearchState.Loading -> renderSearchLoading()\n            is SearchState.Default -> renderSearchDefault()\n            is SearchState.Empty -> renderSearchEmpty()\n            is SearchState.NoConnection -> renderSearchNoConnection()\n            is SearchState.Error -> renderSearchError()\n            is SearchState.Content -> renderSearchContent()\n        }\n    }\n\n    private fun renderSearchLoading() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = true\n            progressBarBottom.isVisible = false\n            ivPlaceholder.isVisible = false\n            tvPlaceholder.isVisible = false\n        }\n    }\n\n    private fun renderSearchDefault() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.setImageResource(R.drawable.search_man)\n            ivPlaceholder.isVisible = true\n            tvPlaceholder.isVisible = false\n            etButtonSearch.setText(\"\")\n            hideKeyboard()\n        }\n    }\n\n    private fun renderSearchEmpty() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.setImageResource(R.drawable.nothing_found_cat)\n            ivPlaceholder.isVisible = true\n            tvPlaceholder.setText(R.string.search_vacancy_list_not_found)\n            tvPlaceholder.isVisible = true\n        }\n    }\n\n    private fun renderSearchError() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.setImageResource(R.drawable.server_error_towel)\n            ivPlaceholder.isVisible = true\n            tvPlaceholder.setText(R.string.search_server_error)\n            tvPlaceholder.isVisible = true\n        }\n    }\n\n    private fun renderSearchNoConnection() {\n        with(binding) {\n            tvButtonSearchResult.isVisible = false\n            rvSearch.isVisible = false\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.setImageResource(R.drawable.no_internet_scull)\n            ivPlaceholder.isVisible = true\n            tvPlaceholder.setText(R.string.search_no_connection)\n            tvPlaceholder.isVisible = true\n        }\n    }\n\n    private fun renderSearchContent() {\n        with(binding) {\n            tvButtonSearchResult.text =\n                requireContext().getString(R.string.found_vacancies_count, vacancyList.size)\n            tvButtonSearchResult.isVisible = true\n            rvSearch.isVisible = true\n            progressBar.isVisible = false\n            progressBarBottom.isVisible = false\n            ivPlaceholder.isVisible = false\n            tvPlaceholder.isVisible = false\n        }\n    }\n\n    private fun openFragmentVacancy(vacancyId: String) {\n        findNavController().navigate(\n            R.id.action_searchFragment_to_vacanciesFragment,\n            Bundle().apply { putInt(\"vacancy_model\", vacancyId.toInt()) }\n        )\n    }\n\n    private fun hideKeyboard() {\n        val inputMethodManager =\n            requireContext().getSystemService(Context.INPUT_METHOD_SERVICE) as? InputMethodManager\n        inputMethodManager?.hideSoftInputFromWindow(binding.etButtonSearch.windowToken, 0)\n        binding.etButtonSearch.isEnabled = true\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        _binding = null\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt
--- a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt	(revision d12066f931b339e320805dd22ab6f135ed9c9886)
+++ b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchFragment.kt	(date 1716226574077)
@@ -54,7 +54,7 @@
             is SearchState.Default -> renderSearchDefault()
             is SearchState.Empty -> renderSearchEmpty()
             is SearchState.NoConnection -> renderSearchNoConnection()
-            is SearchState.Error -> renderSearchError()
+            is SearchState.ServerError -> renderSearchError()
             is SearchState.Content -> renderSearchContent()
         }
     }
Index: app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.ui.search\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport kotlinx.coroutines.Job\nimport ru.practicum.android.diploma.domain.search.SearchInteractor\n\nclass SearchViewModel(val interactor: SearchInteractor) : ViewModel() {\n    private var searchJob: Job? = null\n    private var isClickAllowed = true\n    private var lastSearchQueryText: String? = null\n\n    private val _stateSearch = MutableLiveData<SearchState>(SearchState.Default)\n    val stateSearch: LiveData<SearchState> get() = _stateSearch\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt
--- a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt	(revision d12066f931b339e320805dd22ab6f135ed9c9886)
+++ b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchViewModel.kt	(date 1716226658940)
@@ -3,7 +3,12 @@
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
 import kotlinx.coroutines.Job
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.launch
+import ru.practicum.android.diploma.data.network.NetworkError
+import ru.practicum.android.diploma.domain.models.Vacancy
 import ru.practicum.android.diploma.domain.search.SearchInteractor
 
 class SearchViewModel(val interactor: SearchInteractor) : ViewModel() {
@@ -13,4 +18,74 @@
 
     private val _stateSearch = MutableLiveData<SearchState>(SearchState.Default)
     val stateSearch: LiveData<SearchState> get() = _stateSearch
+
+    fun search(query: String) {
+        if (query.isEmpty()) return
+        renderState(SearchState.Loading)
+
+        viewModelScope.launch {
+            _stateSearch.value = SearchState.Loading
+
+//            interactor.searchVacancy(query).collect { result ->
+//                processResult(result)
+//            }
+        }
+    }
+
+    private fun processResult(result: NetworkError<Vacancy>) {
+        when (result) {
+            is NetworkError.Data -> {
+
+            }
+
+            is NetworkError.ServerError -> {
+                _stateSearch.postValue(SearchState.ServerError(result.message))
+            }
+
+            is NetworkError.NoConnection -> {
+                _stateSearch.postValue(SearchState.NoConnection(result.message))
+            }
+
+            is NetworkError.NothingFound -> {
+                _stateSearch.postValue(SearchState.Empty(result.message))
+            }
+
+            else -> {
+                renderState(SearchState.SearchResult(tracks))
+
+            }
+        }
+    }
+
+    private fun renderState(state: SearchState) {
+        _stateSearch.postValue(state)
+    }
+
+    fun searchDebounce(changedText: String) {
+        if (lastSearchQueryText == changedText) return
+        this.lastSearchQueryText = changedText
+        searchJob?.cancel()
+        searchJob = viewModelScope.launch {
+            delay(SEARCH_DEBOUNCE_DELAY_MILLIS)
+            search(changedText)
+        }
+    }
+
+    fun clickDebounce(): Boolean {
+        val current = isClickAllowed
+        if (isClickAllowed) {
+            isClickAllowed = false
+            searchJob = viewModelScope.launch {
+                delay(CLICK_DEBOUNCE_DELAY_MILLIS)
+                isClickAllowed = true
+            }
+        }
+        return current
+    }
+
+    companion object {
+        private const val SEARCH_DEBOUNCE_DELAY_MILLIS = 2000L
+        private const val CLICK_DEBOUNCE_DELAY_MILLIS = 1000L
+        private const val SIZE_PAGE_LIST = 20
+    }
 }
Index: app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.ui.search\n\nimport ru.practicum.android.diploma.domain.models.Vacancy\n\nsealed class SearchState {\n    object Loading : SearchState()\n    object Default : SearchState()\n    object Empty : SearchState()\n    object NoConnection : SearchState()\n    data class Error(val message: String) : SearchState()\n    data class Content(val vacancies: List<Vacancy>, val count: Int) : SearchState()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt
--- a/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt	(revision d12066f931b339e320805dd22ab6f135ed9c9886)
+++ b/app/src/main/java/ru/practicum/android/diploma/ui/search/SearchState.kt	(date 1716226574110)
@@ -7,6 +7,6 @@
     object Default : SearchState()
     object Empty : SearchState()
     object NoConnection : SearchState()
-    data class Error(val message: String) : SearchState()
+    data class ServerError(val message: String) : SearchState()
     data class Content(val vacancies: List<Vacancy>, val count: Int) : SearchState()
 }
